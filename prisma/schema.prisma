generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            Int      @id @default(autoincrement())
  firstName     String   @map("first_name") @db.VarChar(100)
  lastName      String   @map("last_name") @db.VarChar(100)
  phoneNumber   String   @unique() @map("phone_number") @db.VarChar(10)
  emailAddress  String   @unique() @map("email_address") @db.VarChar(500)
  rewardsPoints Int      @default(0) @map("rewards_points")
  createdAt     DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.DateTime(0)
  orders        Order[]

  @@map("customers")
}

enum Role {
  MANAGER
  SUPERVISOR
  CASHIER
}

model Employee {
  id                 Int      @id @default(autoincrement())
  firstName          String   @map("first_name") @db.VarChar(100)
  lastName           String   @map("last_name") @db.VarChar(100)
  phoneNumber        String   @unique() @map("phone_number") @db.VarChar(10)
  emailAddress       String   @unique() @map("email_address") @db.VarChar(500)
  streetAddress      String   @map("street_address") @db.VarChar(500)
  cityAddress        String   @map("city_address") @db.VarChar(100)
  stateAddress       String   @map("state_address") @db.VarChar(100)
  lastCheckInTime    DateTime @map("last_check_in_time") @db.DateTime(0)
  isCurrentlyOnShift Boolean  @map("is_currently_on_shift") @db.TinyInt()
  isDeleted          Boolean  @default(false) @map("is_deleted") @db.TinyInt()
  role               Role     @default(CASHIER) @map("employee_role")
  createdAt          DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt          DateTime @default(now()) @map("updated_at") @db.DateTime(0)
  orders             Order[]

  @@map("employees")
}

model Order {
  id            Int            @id @default(autoincrement())
  customerId    Int?           @map("customer_id")
  employeeId    Int            @map("employee_id")
  createdAt     DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  customer      Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "orders_ibfk_1")
  employee      Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "orders_ibfk_2")
  orderProducts OrderProduct[]

  @@index([customerId], map: "customer_id")
  @@index([employeeId], map: "employee_id")
  @@map("orders")
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "orders_products_ibfk_1")
  product   Product @relation(fields: [productId], references: [sku], onDelete: Cascade, onUpdate: Cascade, map: "orders_products_ibfk_2")

  @@index([orderId], map: "order_id")
  @@index([productId], map: "product_id")
  @@map("orders_products")
}

model Product {
  sku          Int            @id @default(autoincrement())
  itemName     String         @db.VarChar(1000)
  category     String         @db.VarChar(300)
  price        Decimal        @db.Decimal(6, 2)
  orderProduct OrderProduct[]

  @@map("products")
}
